String name = "Fluffy";
String name = new String("Fluffy");
Both give you a reference variable named name pointing to the String object "Fluffy".


Concaténation :
System.out.println(1 + 2); // 3
System.out.println("a" + "b"); // ab
System.out.println("a" + "b" + 3); // ab3
System.out.println(1 + 2 + "c"); // 3c
System.out.println("c" + 1 + 2); // c12
System.out.println("c" + null); // cnull


int three = 3;
String four = "4";
System.out.println(1 + 2 + three + four);
La sortie est 64


There is one more thing to know about concatenation, but it is easy. In this example, you
just have to remember what += does. Keep in mind, s += "2" means the same thing as s = s + "2".
4: var s = "1"; // s currently holds "1"
5: s += "2"; // s currently holds "12"
6: s += 3; // s currently holds "123"
7: System.out.println(s); // 123


============== LENGTH ======================

var name = "animals";
System.out.println(name.length()); // 7


============== CHAR AT ======================

var name = "animals";
System.out.println(name.charAt(0)); // a
System.out.println(name.charAt(6)); // s
System.out.println(name.charAt(7)); // exception

============== INDEX OF ======================

public int indexOf(int ch)
public int indexOf(int ch, int fromIndex)
public int indexOf(String str)
public int indexOf(String str, int fromIndex)

var name = "animals";
System.out.println(name.indexOf('a')); // 0
System.out.println(name.indexOf("al")); // 4
System.out.println(name.indexOf('a', 4)); // 4
System.out.println(name.indexOf("al", 5)); // -1

=============== SUB STRING ========================

public String substring(int beginIndex)
public String substring(int beginIndex, int endIndex)

var name = "animals";
System.out.println(name.substring(3)); // mals
System.out.println(name.substring(name.indexOf('m'))); // mals
System.out.println(name.substring(3, 4)); // m
System.out.println(name.substring(3, 7)); // mals


=============== TO LOWER / UPPER CASE ========================

public String toLowerCase()
public String toUpperCase()

var name = "animals";
System.out.println(name.toUpperCase()); // ANIMALS
System.out.println("Abc123".toLowerCase()); // abc123


================= EQUALITY ===============================

public boolean equals(Object obj)
public boolean equalsIgnoreCase(String str)

System.out.println("abc".equals("ABC")); // false
System.out.println("ABC".equals("ABC")); // true
System.out.println("abc".equalsIgnoreCase("ABC")); // true


================== SEARCHNING =============================

public boolean startsWith(String prefix)
public boolean endsWith(String suffix)
public boolean contains(CharSequence charSeq)

System.out.println("abc".startsWith("a")); // true
System.out.println("abc".startsWith("A")); // false
System.out.println("abc".endsWith("c")); // true
System.out.println("abc".endsWith("a")); // false
System.out.println("abc".contains("b")); // true
System.out.println("abc".contains("B")); // false


================= REPLACE ==============================

public String replace(char oldChar, char newChar)
public String replace(CharSequence target, CharSequence replacement)

System.out.println("abcabc".replace('a', 'A')); // AbcAbc
System.out.println("abcabc".replace("a", "A")); // AbcAbc


=============== REMOVING WHITESPACE ====================

These methods remove blank space from the beginning and/or end of a String. The strip()
and trim() methods remove whitespace from the beginning and end of a String.

public String strip()
public String stripLeading()
public String stripTrailing()
public String trim()

System.out.println("abc".strip()); // abc
System.out.println("\t a b c\n".strip()); // a b c
String text = " abc\t ";
System.out.println(text.trim().length()); // 3
System.out.println(text.strip().length()); // 3
System.out.println(text.stripLeading().length()); // 5
System.out.println(text.stripTrailing().length());// 4


================ INDENTATION ==============================
public String indent(int numberSpaces)
public String stripIndent()


================= ESCAPE ===================================
public String translateEscapes()
The following code shows how to use these methods:
var str = "1\\t2";
System.out.println(str); // 1\t2
System.out.println(str.translateEscapes()); // 1 2



==================== IS EMPTY / IS BLANK ======================
System.out.println(" ".isEmpty()); // false
System.out.println("".isEmpty()); // true
System.out.println(" ".isBlank()); // true
System.out.println("".isBlank()); // true


========================= FORMAT ==============================
public static String format(String format, Object args...)
public static String format(Locale loc, String format, Object args...)
public String formatted(Object args...)

168 Chapter 4 ■ Core APIs

The following code shows how to use these methods:
var name = "Kate";
var orderId = 5;
// All print: Hello Kate, order 5 is ready
System.out.println("Hello "+name+", order "+orderId+" is ready");
System.out.println(String.format("Hello %s, order %d is ready",
name, orderId));
System.out.println("Hello %s, order %d is ready"
.formatted(name, orderId));

================= Utiliser String builder ======================
Ce code crée énormément d'objet String avec alpha étant donné que les String sont immuables
String alpha = "";
for(char current = 'a'; current <= 'z'; current++)
    alpha += current;
System.out.println(alpha);

Grâce à StringBuilder, il est possible de ne pas en créer autant :
StringBuilder alpha = new StringBuilder();
for(char current = 'a'; current <= 'z'; current++)
    alpha.append(current);
System.out.println(alpha);


Insert en String Builder :

var sb = new StringBuilder("animals");
sb.insert(7, "-"); // sb = animals-
sb.insert(0, "-"); // sb = -animals-
sb.insert(4, "-"); // sb = -ani-mals-
System.out.println(sb);


Delete en String Builder

public StringBuilder delete(int startIndex, int endIndex)
public StringBuilder deleteCharAt(int index)

The following code shows how to use these methods:
var sb = new StringBuilder("abcdef");
sb.delete(1, 3); // sb = adef
sb.deleteCharAt(5); // exception


Remplacement d'une chaine par une autre

public StringBuilder replace(int startIndex, int endIndex, String newString)

var builder = new StringBuilder("pigeon dirty");
builder.replace(3, 6, "sty");
System.out.println(builder); // pigsty dirty



Reversing

public StringBuilder reverse()

var sb = new StringBuilder("ABC");
sb.reverse();
System.out.println(sb);


Le .append renvoie la même référence d'objet que celui en cours :

var one = new StringBuilder();
var two = new StringBuilder();
var three = one.append("a");
System.out.println(one == two); // false
System.out.println(one == three); // true

